using System;
using System.Diagnostics;

namespace algoritmlesson3task1
{
    class Program
    {
        public static readonly int size = 10000000;
        public class PointClass
        {
            public float X, Y;
        }
        public struct PointStructF 
        {
            public float X, Y;
        }
        public struct PointStructD 
        {
            public double X, Y;
        }
        public static PointStructF[] masF = new PointStructF[size + 1];
        public static PointStructD[] masD = new PointStructD[size + 1];
        public static PointClass[] masC = new PointClass[size + 1];
        public static float PointDistance1(ref PointClass pointOne, ref PointClass pointTwo)
        {
            float x = pointOne.X - pointTwo.X;
            float y = pointOne.Y - pointTwo.Y;
            return (float)Math.Sqrt((x * x) + (y * y));
        }
        public static float PointDistance2(PointStructF pointOne, PointStructF pointTwo)
        {
            float x = pointOne.X - pointTwo.X;
            float y = pointOne.Y - pointTwo.Y;
            return (float)Math.Sqrt((x * x) + (y * y));
        }
        public static double PointDistance3(PointStructD pointOne, PointStructD pointTwo)
        {
            double x = pointOne.X - pointTwo.X;
            double y = pointOne.Y - pointTwo.Y;
            return Math.Sqrt((x * x) + (y * y));
        }
        public static float PointDistance4(PointStructF pointOne, PointStructF pointTwo)
        {
            float x = pointOne.X - pointTwo.X;
            float y = pointOne.Y - pointTwo.Y;
            return Sqrt((x * x) + (y * y));
        }
        public static float Sqrt(float x)
        {
            float s = ((x / 2) + x / (x / 2));
            for (int i = 0; i < 4; i++)
            {
                s = (s + x / s) / 2;
            }
            return s;
        }
        static void Main(string[] args)
        {
            Random rnd = new Random();
            for (int i = 0; i <= size; i++)
            {
                masF[i].X = (float)rnd.NextDouble();
                masF[i].Y = (float)rnd.NextDouble();
                masD[i].X = rnd.NextDouble();
                masD[i].Y = rnd.NextDouble();
                masC[i] = new PointClass
                {
                    X = masF[i].X,
                    Y = masF[i].Y
                };
            }
            Stopwatch stopWatch = new Stopwatch();
            stopWatch.Restart();
            for (int i = 0; i < size; i++)
            {
                _ = PointDistance1(ref masC[i], ref masC[i + 1]);
            }
            stopWatch.Stop();
            long milisek1 = stopWatch.ElapsedMilliseconds;
            stopWatch.Restart();
            for (int i = 0; i < size; i++)
            {
                _ = PointDistance2(masF[i], masF[i + 1]);
            }
            stopWatch.Stop();
            long milisek2 = stopWatch.ElapsedMilliseconds;
            stopWatch.Restart();
            for (int i = 0; i < size; i++)
            {
                _ = PointDistance3(masD[i], masD[i + 1]);
            }
            stopWatch.Stop();
            long milisek3 = stopWatch.ElapsedMilliseconds;
            stopWatch.Restart();
            for (int i = 0; i < size; i++)
            {
                _ = PointDistance4(masF[i], masF[i + 1]);
            }
            stopWatch.Stop();
            long milisek4 = stopWatch.ElapsedMilliseconds;
            Console.WriteLine("Номер теста\t|\tвремя");
            Console.WriteLine("\t№ 1\t|\t" + milisek1.ToString());
            Console.WriteLine("\t№ 2\t|\t" + milisek2.ToString());
            Console.WriteLine("\t№ 3\t|\t" + milisek3.ToString());
            Console.WriteLine("\t№ 4\t|\t" + milisek4.ToString());
        }
    }
}